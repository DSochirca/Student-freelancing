buildscript {
    repositories {
        mavenCentral()
        //Needed only for SNAPSHOT versions
        //maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    }
    dependencies {
        classpath 'info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.5.2'
    }
}

plugins {
    id 'org.springframework.boot' version '2.6.0'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id "io.freefair.lombok" version "6.3.0"
    id 'java'
    // Test coverage
    id 'jacoco'

    // Code style
    id 'checkstyle'

    // PMD
    id 'pmd'

    // PITest
    id 'info.solidsoft.pitest' version '1.5.2'
}

group = 'nl.tudelft.cse.sem.template'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 11
targetCompatibility = 11

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
}

ext {
    set('springCloudVersion', "2021.0.0-RC1")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    //Uses postgres. Comment it if you don't use postgres
    //runtimeOnly 'org.postgresql:postgresql'

    // Local test database (in-memory)
    implementation 'com.h2database:h2'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    developmentOnly 'org.hibernate:hibernate-entitymanager'
    implementation project(path: ':commonUtility', configuration: 'default')

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation('org.junit.jupiter:junit-jupiter:5.5.2')
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.1.0'
    testImplementation('org.assertj:assertj-core:3.14.0')
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

def jacocoExclude = [
        'nl.tudelft.sem.template.entities',
        'nl.tudelft.sem.template.repositories',
        'nl.tudelft.sem.template.exceptions',
        'nl.tudelft.sem.template.ContractServiceApplication.class'
]

test {
    useJUnitPlatform()
    jacoco {
        enabled = true
        includes = ['nl.tudelft.sem.template.*']
        excludes = [
                'envloader.*',
                'envloader.exceptions*',
                'nl.tudelft.sem.template.entities.*',
                'nl.tudelft.sem.template.ContractServiceApplication',
        ]
    }

    jacocoTestReport {
        dependsOn test

        afterEvaluate {
            getClassDirectories().setFrom(classDirectories.files.collect {
                fileTree(dir: it,
                        exclude: [
                                '**/envloader/*.class',
                                '**/envloader/exceptions/*.class',
                                '**/nl/tudelft/sem/template/entities/*.class',
                                '**/nl/tudelft/sem/template/ContractServiceApplication.class',
                        ]
                )
            })
        }
    }
}

repositories {
    mavenCentral()
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/reports/jacoco/html")
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: jacocoExclude)
        }))
    }
}

jacocoTestCoverageVerification() {
    dependsOn test
    violationRules {
        rule {
            enabled = true
            element = 'CLASS'
            includes = ['nl.tudelft.sem.template.*']
            excludes = jacocoExclude

            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.1
            }
        }
    }
}

checkstyle {
    toolVersion "8.37"
    configFile = file("${projectDir}/config/checkstyle/checkstyle.xml")
}

pmd {
    incrementalAnalysis = true
}

apply plugin: 'info.solidsoft.pitest'
pitest {
    //adds dependency to org.pitest:pitest-junit5-plugin and sets "testPlugin" to "junit5"
    junit5PluginVersion = '0.15'

    targetClasses = ['nl.tudelft.sem.template.*']  //by default "${project.group}.*"
    targetTests = ['nl.tudelft.sem.template.*']
    excludedClasses = ['nl.tudelft.sem.template.dtos.*',
                       'nl.tudelft.sem.template.entities.*']
    pitestVersion = '1.5.1' //not needed when a default PIT version should be used
    threads = 4
    outputFormats = ['XML', 'HTML']
    timestampedReports = false
}

tasks.withType(Test) {
    systemProperty 'eureka.client.enabled', 'false'
}

sourceCompatibility = 1.11

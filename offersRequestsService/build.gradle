buildscript {
	repositories {
		mavenCentral()
		//Needed only for SNAPSHOT versions
		//maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
	}
	dependencies {
		classpath 'info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.5.2'
	}
}

plugins {
	id 'org.springframework.boot' version '2.6.0'
	id 'io.spring.dependency-management' version '1.0.10.RELEASE'
	id "io.freefair.lombok" version "6.3.0"
	id 'java'
	// Test coverage
	id 'jacoco'

	// Code style
	id 'checkstyle'

	// PMD
	id 'pmd'

	// PITest
	id 'info.solidsoft.pitest' version '1.5.2'
}

group = 'nl.tudelft.cse.sem.template'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 11
targetCompatibility = 11

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
}

ext {
	set('springCloudVersion', "2021.0.0-RC1")
}

dependencies {
	implementation group: 'javax.validation', name: 'validation-api', version: '2.0.0.Final'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.junit.jupiter:junit-jupiter:5.7.0'
	implementation 'org.junit.jupiter:junit-jupiter:5.7.0'
	implementation 'com.h2database:h2'
	runtimeOnly 'org.postgresql:postgresql'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation project(path: ':commonUtility', configuration: 'default')
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}

	testImplementation('org.junit.jupiter:junit-jupiter:5.5.2')
	testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.1.0'
	testImplementation('org.assertj:assertj-core:3.14.0')
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

test {
	useJUnitPlatform()
	jacoco {
		enabled = true
		includes = ['nl.tudelft.sem.template.*']
		excludes = [
				'envloader.*',
				'envloader.exceptions*',
				'nl.tudelft.sem.template.OffersRequestsServiceApplication',
				'nl.tudelft.sem.template.entities.dtos.*',
				'nl.tudelft.sem.template.entities.*',
				'nl.tudelft.sem.template.converters.*',
		]
	}

	jacocoTestReport {
		dependsOn test

		afterEvaluate {
			getClassDirectories().setFrom(classDirectories.files.collect {
				fileTree(dir: it,
						exclude: [
								'**/envloader/*.class',
								'**/envloader/exceptions/*.class',
								'**/nl/tudelft/sem/template/OffersRequestsServiceApplication.class',
								'**/nl/tudelft/sem/template/entities/dtos/*.class',
								'**/nl/tudelft/sem/template/entities/*.class',
								'**/nl/tudelft/sem/template/converters/*.class',
						]
				)
			})
		}
	}
}

repositories {
	mavenCentral()
}

jacocoTestCoverageVerification() {
	dependsOn test
	violationRules {
		rule {
			enabled = true
			element = 'CLASS'
			includes = ['nl.tudelft.sem.template.*']

			limit {
				counter = 'BRANCH'
				value = 'COVEREDRATIO'
				minimum = 0.1
			}
		}
	}
}

checkstyle {
	toolVersion "8.37"
	configFile = file("${projectDir}/config/checkstyle/checkstyle.xml")
}

pmd {
	incrementalAnalysis = true
}

apply plugin: 'info.solidsoft.pitest'
pitest {
	//adds dependency to org.pitest:pitest-junit5-plugin and sets "testPlugin" to "junit5"
	junit5PluginVersion = '0.15'

	targetClasses = ['nl.tudelft.sem.template.*']  //by default "${project.group}.*"
	targetTests = ['nl.tudelft.sem.template.*']
	excludedClasses = ['nl.tudelft.sem.template.entities.*']

	pitestVersion = '1.5.1' //not needed when a default PIT version should be used
	threads = 4
	outputFormats = ['XML', 'HTML']
	timestampedReports = false
}

tasks.withType(Test) {
	systemProperty'eureka.client.enabled',
			'false'
}
